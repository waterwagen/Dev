////////////////
// Variables ///
////////////////

///////////////////
/// Build Setup ///
/////////////////// 

//defaultTasks 'intro'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'sonar'

compileJava {
	sourceCompatibility = 1.7
}

test {
	exclude '**/*Tests.class',
			'com/waterwagen/SpikeSandbox.class',
			'com/waterwagen/TestMlsSoftware.class',
			'com/waterwagen/parser/html/TestHtmlScraper.class'
	jvmArgs '-Xms256m', '-Xmx512m', '-XX:MaxPermSize=128m'
	forkEvery=1 // how many test classes should be run before creating a new JVM instance
//	maxParallelForks = 5 // how many test classes should be run at the same time
}

sonar {
    server {
        url = 'http://localhost:9000'
    }
    database {
//      url = 'jdbc:h2:tcp://localhost:9092/sonar' // for Sonar 3.2
//		driverClassName = 'org.h2.Driver' // for Sonar 3.2
//      url = 'jdbc:derby://localhost:1527/sonar;create=true' // for Sonar 3.1.1
//		driverClassName = 'org.apache.derby.jdbc.ClientDriver' // for Sonar 3.1.1
//		username = 'sonar' // don't need for Oracle driver
//      password = 'sonar' // don't need for Oracle driver
        url = 'jdbc:oracle:thin:sonar/sonar@localhost:1521:XE'
		driverClassName = 'oracle.jdbc.OracleDriver'
    }
}
sonarAnalyze.dependsOn build

dependencies {
	compile 'org.apache.httpcomponents:httpclient:4.2.1',
			'org.apache.httpcomponents:httpcore:4.2.1',
			'com.google.inject:guice:3.0',
			'commons-io:commons-io:2.4',
			'org.jsoup:jsoup:1.6.3',
			'com.c2.fit:fit:1.1',
			files("${projectDir}/src/main/resources/lib/ojdbc6.jar")
	compile 'org.scala-lang:scala-library:2.9.2' // Libraries needed for scala api
	testCompile	'org.hamcrest:hamcrest-all:1.3', // keep this above the junit and possibly the jmock dependencies because they have older versions of hamcrest embedded
				'org.jmock:jmock-junit4:2.5.1',
				'org.apache.camel:camel-core:2.10.0',
				'org.apache.camel:camel-jms:2.10.0',
				'org.apache.camel:camel-sql:2.10.0',
				'org.apache.activemq:activemq-core:5.6.0',
				'org.springframework:spring-jdbc:3.1.2.RELEASE'
	testCompile ('junit:junit:4.+') {transitive = false} // don't want the hamcrest version this pulls in transitively
	testCompile('org.jmock:jmock:2.5.1') {transitive = false} // don't want the hamcrest version this pulls in transitively
	groovy 'org.codehaus.groovy:groovy-all:2.0.1'
	scalaTools 'org.scala-lang:scala-compiler:2.9.2', // Libraries needed to run the scala tools
				'org.scala-lang:scala-library:2.9.2' 
//	runtime fileTree(dir: 'libs', include: '*.jar')
}

repositories {
	mavenCentral()
}

task jenkinsTest {
	inputs.files test.outputs.files
	doLast{
		def timestamp = System.currentTimeMillis()
		test.testResultsDir.eachFile { it.lastModified = timestamp }
	}
}
 
build.dependsOn(jenkinsTest)

//////////////////////////////////////////////////
/// Some sandbox stuff to see how Gradle works ///
//////////////////////////////////////////////////

task intro << {
	println "I'm Gradle."
}

task buzzoff(dependsOn:intro) << { // here's another way to depend on another task: buzzoff.dependsOn intro
	println 'Get out of here!'
}

task taskTest << {
	println 'Original added line'
}

taskTest << {
	println '<< added action performed'
}

taskTest {
	task ->
	
	doLast
	{
		println 'doLast added action performed'
	}
	doFirst
	{
		println 'doFirst added action performed'
	}
}

taskTest { // this configures the task, so it seems to be similar to constructor code
	task ->
	
	task.onlyIf {
		def prop = System.getProperty("shouldRunTaskTest")
		return prop && prop == 'true'
	}
}

task upper << {
	String someString = 'mY_nAmE'
	println "Original: " + someString
	println "Upper case: " + someString.toUpperCase()
}

task hello << {
	println 'Hello world!'
}