//////////////////
/// Properties ///
//////////////////

version = '0.1-SNAPSHOT'

/////////////////
/// Variables ///
/////////////////

def path_seperator = System.getProperty("path.separator")
def fitnesse_classpath_str = "${projectDir}/src/test/resources/fitnesse.jar" + path_seperator +
					"${projectDir}/build/classes/main" + path_seperator +
					"${projectDir}/build/classes/test"

///////////////////
/// Build Setup ///
/////////////////// 

//defaultTasks 'intro'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'sonar'

compileJava {
	sourceCompatibility = 1.7
}

test {
	exclude '**/*Tests.class',
			'com/waterwagen/SpikeSandbox.class',
			'com/waterwagen/mris/TestMlsSoftware.class'
	jvmArgs '-Xms256m', '-Xmx512m', '-XX:MaxPermSize=128m'
	forkEvery=1 // how many test classes should be run before creating a new JVM instance
//	maxParallelForks = 5 // how many test classes should be run at the same time
}

sonar {
	project {
		name = 'Dev'
		version = version
	}
	server {
		url = 'http://localhost:9000'
	}
	database {
		url = 'jdbc:oracle:thin:sonar/sonar@localhost:1521:XE'
		driverClassName = 'oracle.jdbc.OracleDriver'
	}
}

dependencies {
	compile 'org.apache.httpcomponents:httpclient:4.2.1',
			'org.apache.httpcomponents:httpcore:4.2.1',
			'com.google.inject:guice:3.0',
			'commons-io:commons-io:2.4',
			'org.jsoup:jsoup:1.6.3',
			'com.c2.fit:fit:1.1',
			files("${projectDir}/src/main/resources/lib/ojdbc6.jar")
	testCompile	'org.hamcrest:hamcrest-all:1.3', // keep this above the junit and possibly the jmock dependencies because they have older versions of hamcrest embedded
				'org.jmock:jmock-junit4:2.5.1',
				'org.apache.camel:camel-core:2.10.0',
				'org.apache.camel:camel-jms:2.10.0',
				'org.apache.camel:camel-sql:2.10.0',
				'org.apache.activemq:activemq-core:5.6.0',
				'org.springframework:spring-jdbc:3.1.2.RELEASE'
	testCompile ('junit:junit:4.+') {transitive = false} // don't want the hamcrest version this pulls in transitively
	testCompile('org.jmock:jmock:2.5.1') {transitive = false} // don't want the hamcrest version this pulls in transitively
	groovy 'org.codehaus.groovy:groovy-all:2.0.1'
//	runtime fileTree(dir: 'libs', include: '*.jar')
}

repositories {
	mavenCentral()
}

task jenkinsTest {
	inputs.files test.outputs.files
	doLast{
		def timestamp = System.currentTimeMillis()
		test.testResultsDir.eachFile { it.lastModified = timestamp }
	}
}
build.dependsOn(jenkinsTest)

//task startFitNesse << {
//	
//	// start up the FitNesse server
//	println 'Starting Fitnesse...'
//	
//	Thread thread = Thread.startDaemon
//	{
//		ant.java(classpath:fitnesse_classpath_str, classname:'fitnesseMain.FitNesseMain', dir:'src/test/resources', fork:'true')
//	}
//	
//	// wait for FitNesse to start up
//	def fitnesse_url = new URL('http://localhost')
//	def connection_accepted = false
//	while(!connection_accepted)
//	{
//	    try
//	    {
//	        fitnesse_url.content
//	        connection_accepted = true
//	    }
//	    catch(Exception exc){Thread.sleep(500L)}
//	}
//}
//
//task editAcceptanceTests(dependsOn:startFitNesse) << {
//	
//	// open the FitNesse url in a browser after starting FitNesse
//	println 'Fitnesse started. Opening the FitNesse home page in the browser... When finished using FitNesse, Ctl-C to stop Gradle task.'
//
//	def command = 'chrome localhost'
//	def process = command.execute()
//	
//	while(true) {Thread.sleep(1000L)}
//}
//
//task runAcceptanceTests(dependsOn:startFitNesse) << {
//	
//	def test_name = 'MrisContactInfoApplication.MrisRegressionSuite?suite'
//	def fitnesse_result_file_path = "${buildDir}\\fitnesse-result.xml"
//
//	println "Running the project acceptance test named ${test_name} and writing the results to file at ${fitnesse_result_file_path}."
//	
//	def test_result = new URL("http://localhost/${test_name}&format=xml").content.text
//	def result_file = new File(fitnesse_result_file_path)
//	result_file.write(test_result)
//	
//	throwExceptionOnAnyFitNesseTestFailures(fitnesse_result_file_path)
//}

def throwExceptionOnAnyFitNesseTestFailures(fitnesse_result_file_path)
{
	def file_contents = new File(fitnesse_result_file_path).text
	def xml_root = new XmlParser().parseText(file_contents)
	def wrong_count = Integer.parseInt(xml_root.result.counts.wrong.text())
	if(wrong_count > 0) 
		throw new RuntimeException("${wrong_count} acceptance test(s) failed. See ${fitnesse_result_file_path} for details.")
}

task acceptanceTest(type:Test)
acceptanceTest
{
	include 'com/waterwagen/mris/acceptancetest/AllRegressionAcceptanceTests.class'
}

//////////////////////////////////////////////////
/// Some sandbox stuff to see how Gradle works ///
//////////////////////////////////////////////////

task intro << {
	println "I'm Gradle."
}

task buzzoff(dependsOn:intro) << { // here's another way to depend on another task: buzzoff.dependsOn intro
	println 'Get out of here!'
}

task taskTest << {
	println 'Original added line'
}

taskTest << {
	println '<< added action performed'
}

taskTest {
	task ->
	
	doLast
	{
		println 'doLast added action performed'
	}
	doFirst
	{
		println 'doFirst added action performed'
	}
}

taskTest { // this configures the task, so it seems to be similar to constructor code
	task ->
	
	task.onlyIf {
		def prop = System.getProperty("shouldRunTaskTest")
		return prop && prop == 'true'
	}
}

task upper << {
	String someString = 'mY_nAmE'
	println "Original: " + someString
	println "Upper case: " + someString.toUpperCase()
}

task hello << {
	println 'Hello world!'
}